// Mocks generated by Mockito 5.4.4 from annotations
// in hive/test/tests/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:collection' as _i11;
import 'dart:convert' as _i19;
import 'dart:io' as _i4;
import 'dart:math' as _i17;
import 'dart:typed_data' as _i15;

import 'package:hive/hive.dart' as _i2;
import 'package:hive/src/backend/storage_backend.dart' as _i9;
import 'package:hive/src/binary/frame.dart' as _i8;
import 'package:hive/src/box/change_notifier.dart' as _i7;
import 'package:hive/src/box/default_compaction_strategy.dart' as _i14;
import 'package:hive/src/box/default_key_comparator.dart' as _i13;
import 'package:hive/src/box/keystore.dart' as _i10;
import 'package:hive/src/hive_impl.dart' as _i12;
import 'package:hive/src/io/frame_io_helper.dart' as _i20;
import 'package:hive/src/object/hive_list_impl.dart' as _i18;
import 'package:hive/src/object/hive_object.dart' as _i3;
import 'package:hive/src/registry/type_registry_impl.dart' as _i16;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBox_0<E1> extends _i1.SmartFake implements _i2.Box<E1> {
  _FakeBox_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLazyBox_1<E1> extends _i1.SmartFake implements _i2.LazyBox<E1> {
  _FakeLazyBox_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBoxBase_2<E1> extends _i1.SmartFake implements _i2.BoxBase<E1> {
  _FakeBoxBase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIterator_3<E1> extends _i1.SmartFake implements Iterator<E1> {
  _FakeIterator_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHiveList_4<E1 extends _i3.HiveObjectMixin> extends _i1.SmartFake
    implements _i2.HiveList<E1> {
  _FakeHiveList_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRandomAccessFile_5 extends _i1.SmartFake
    implements _i4.RandomAccessFile {
  _FakeRandomAccessFile_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFile_6 extends _i1.SmartFake implements _i4.File {
  _FakeFile_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_7 extends _i1.SmartFake implements Uri {
  _FakeUri_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectory_8 extends _i1.SmartFake implements _i4.Directory {
  _FakeDirectory_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystemEntity_9 extends _i1.SmartFake
    implements _i4.FileSystemEntity {
  _FakeFileSystemEntity_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_10 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOSink_11 extends _i1.SmartFake implements _i4.IOSink {
  _FakeIOSink_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileStat_12 extends _i1.SmartFake implements _i4.FileStat {
  _FakeFileStat_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i2.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values => (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
      ) as bool);

  @override
  bool get lazy => (super.noSuchMethod(
        Invocation.getter(#lazy),
        returnValue: false,
      ) as bool);

  @override
  Iterable<dynamic> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <dynamic>[],
      ) as Iterable<dynamic>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  Iterable<E> valuesBetween({
    dynamic startKey,
    dynamic endKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #valuesBetween,
          [],
          {
            #startKey: startKey,
            #endKey: endKey,
          },
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  E? getAt(int? index) => (super.noSuchMethod(Invocation.method(
        #getAt,
        [index],
      )) as E?);

  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <dynamic, E>{},
      ) as Map<dynamic, E>);

  @override
  dynamic keyAt(int? index) => super.noSuchMethod(Invocation.method(
        #keyAt,
        [index],
      ));

  @override
  _i6.Stream<_i2.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {#key: key},
        ),
        returnValue: _i6.Stream<_i2.BoxEvent>.empty(),
      ) as _i6.Stream<_i2.BoxEvent>);

  @override
  bool containsKey(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> put(
    dynamic key,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [
            key,
            value,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> putAt(
    int? index,
    E? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAt,
          [
            index,
            value,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> putAll(Map<dynamic, E>? entries) => (super.noSuchMethod(
        Invocation.method(
          #putAll,
          [entries],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<int> add(E? value) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [value],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<Iterable<int>> addAll(Iterable<E>? values) => (super.noSuchMethod(
        Invocation.method(
          #addAll,
          [values],
        ),
        returnValue: _i6.Future<Iterable<int>>.value(<int>[]),
      ) as _i6.Future<Iterable<int>>);

  @override
  _i6.Future<void> delete(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [key],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deleteAt,
          [index],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteAll(Iterable<dynamic>? keys) => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [keys],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> compact() => (super.noSuchMethod(
        Invocation.method(
          #compact,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<int> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [ChangeNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockChangeNotifier extends _i1.Mock implements _i7.ChangeNotifier {
  MockChangeNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void notify(_i8.Frame? frame) => super.noSuchMethod(
        Invocation.method(
          #notify,
          [frame],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Stream<_i2.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {#key: key},
        ),
        returnValue: _i6.Stream<_i2.BoxEvent>.empty(),
      ) as _i6.Stream<_i2.BoxEvent>);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [StorageBackend].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageBackend extends _i1.Mock implements _i9.StorageBackend {
  MockStorageBackend() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get supportsCompaction => (super.noSuchMethod(
        Invocation.getter(#supportsCompaction),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> initialize(
    _i2.TypeRegistry? registry,
    _i10.Keystore<dynamic>? keystore,
    bool? lazy,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [
            registry,
            keystore,
            lazy,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<dynamic> readValue(_i8.Frame? frame) => (super.noSuchMethod(
        Invocation.method(
          #readValue,
          [frame],
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  _i6.Future<void> writeFrames(List<_i8.Frame>? frames) => (super.noSuchMethod(
        Invocation.method(
          #writeFrames,
          [frames],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> compact(Iterable<_i8.Frame>? frames) => (super.noSuchMethod(
        Invocation.method(
          #compact,
          [frames],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [Keystore].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeystore<E> extends _i1.Mock implements _i10.Keystore<E> {
  MockKeystore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.ListQueue<_i10.KeyTransaction<E>> get transactions =>
      (super.noSuchMethod(
        Invocation.getter(#transactions),
        returnValue: _i5.dummyValue<_i11.ListQueue<_i10.KeyTransaction<E>>>(
          this,
          Invocation.getter(#transactions),
        ),
      ) as _i11.ListQueue<_i10.KeyTransaction<E>>);

  @override
  int get deletedEntries => (super.noSuchMethod(
        Invocation.getter(#deletedEntries),
        returnValue: 0,
      ) as int);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  Iterable<_i8.Frame> get frames => (super.noSuchMethod(
        Invocation.getter(#frames),
        returnValue: <_i8.Frame>[],
      ) as Iterable<_i8.Frame>);

  @override
  void resetDeletedEntries() => super.noSuchMethod(
        Invocation.method(
          #resetDeletedEntries,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int autoIncrement() => (super.noSuchMethod(
        Invocation.method(
          #autoIncrement,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  void updateAutoIncrement(int? key) => super.noSuchMethod(
        Invocation.method(
          #updateAutoIncrement,
          [key],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsKey(dynamic key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  dynamic keyAt(int? index) => super.noSuchMethod(Invocation.method(
        #keyAt,
        [index],
      ));

  @override
  _i8.Frame? getAt(int? index) => (super.noSuchMethod(Invocation.method(
        #getAt,
        [index],
      )) as _i8.Frame?);

  @override
  Iterable<dynamic> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <dynamic>[],
      ) as Iterable<dynamic>);

  @override
  Iterable<E> getValues() => (super.noSuchMethod(
        Invocation.method(
          #getValues,
          [],
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  Iterable<E> getValuesBetween([
    dynamic startKey,
    dynamic endKey,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #getValuesBetween,
          [
            startKey,
            endKey,
          ],
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  _i6.Stream<_i2.BoxEvent> watch({dynamic key}) => (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {#key: key},
        ),
        returnValue: _i6.Stream<_i2.BoxEvent>.empty(),
      ) as _i6.Stream<_i2.BoxEvent>);

  @override
  _i8.Frame? insert(
    _i8.Frame? frame, {
    bool? notify = true,
    bool? lazy = false,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #insert,
        [frame],
        {
          #notify: notify,
          #lazy: lazy,
        },
      )) as _i8.Frame?);

  @override
  bool beginTransaction(List<_i8.Frame>? newFrames) => (super.noSuchMethod(
        Invocation.method(
          #beginTransaction,
          [newFrames],
        ),
        returnValue: false,
      ) as bool);

  @override
  void commitTransaction() => super.noSuchMethod(
        Invocation.method(
          #commitTransaction,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void cancelTransaction() => super.noSuchMethod(
        Invocation.method(
          #cancelTransaction,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i6.Future<dynamic> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
}

/// A class which mocks [HiveImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveImpl extends _i1.Mock implements _i12.HiveImpl {
  MockHiveImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set homePath(String? _homePath) => super.noSuchMethod(
        Invocation.setter(
          #homePath,
          _homePath,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void init(String? path) => super.noSuchMethod(
        Invocation.method(
          #init,
          [path],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i2.Box<E>> openBox<E>(
    String? name, {
    _i2.HiveCipher? encryptionCipher,
    _i2.KeyComparator? keyComparator = _i13.defaultKeyComparator,
    _i2.CompactionStrategy? compactionStrategy = _i14.defaultCompactionStrategy,
    bool? crashRecovery = true,
    String? path,
    _i15.Uint8List? bytes,
    List<int>? encryptionKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openBox,
          [name],
          {
            #encryptionCipher: encryptionCipher,
            #keyComparator: keyComparator,
            #compactionStrategy: compactionStrategy,
            #crashRecovery: crashRecovery,
            #path: path,
            #bytes: bytes,
            #encryptionKey: encryptionKey,
          },
        ),
        returnValue: _i6.Future<_i2.Box<E>>.value(_FakeBox_0<E>(
          this,
          Invocation.method(
            #openBox,
            [name],
            {
              #encryptionCipher: encryptionCipher,
              #keyComparator: keyComparator,
              #compactionStrategy: compactionStrategy,
              #crashRecovery: crashRecovery,
              #path: path,
              #bytes: bytes,
              #encryptionKey: encryptionKey,
            },
          ),
        )),
      ) as _i6.Future<_i2.Box<E>>);

  @override
  _i6.Future<_i2.LazyBox<E>> openLazyBox<E>(
    String? name, {
    _i2.HiveCipher? encryptionCipher,
    _i2.KeyComparator? keyComparator = _i13.defaultKeyComparator,
    _i2.CompactionStrategy? compactionStrategy = _i14.defaultCompactionStrategy,
    bool? crashRecovery = true,
    String? path,
    List<int>? encryptionKey,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openLazyBox,
          [name],
          {
            #encryptionCipher: encryptionCipher,
            #keyComparator: keyComparator,
            #compactionStrategy: compactionStrategy,
            #crashRecovery: crashRecovery,
            #path: path,
            #encryptionKey: encryptionKey,
          },
        ),
        returnValue: _i6.Future<_i2.LazyBox<E>>.value(_FakeLazyBox_1<E>(
          this,
          Invocation.method(
            #openLazyBox,
            [name],
            {
              #encryptionCipher: encryptionCipher,
              #keyComparator: keyComparator,
              #compactionStrategy: compactionStrategy,
              #crashRecovery: crashRecovery,
              #path: path,
              #encryptionKey: encryptionKey,
            },
          ),
        )),
      ) as _i6.Future<_i2.LazyBox<E>>);

  @override
  _i2.BoxBase<dynamic>? getBoxWithoutCheckInternal(String? name) =>
      (super.noSuchMethod(Invocation.method(
        #getBoxWithoutCheckInternal,
        [name],
      )) as _i2.BoxBase<dynamic>?);

  @override
  _i2.Box<E> box<E>(String? name) => (super.noSuchMethod(
        Invocation.method(
          #box,
          [name],
        ),
        returnValue: _FakeBox_0<E>(
          this,
          Invocation.method(
            #box,
            [name],
          ),
        ),
      ) as _i2.Box<E>);

  @override
  _i2.LazyBox<E> lazyBox<E>(String? name) => (super.noSuchMethod(
        Invocation.method(
          #lazyBox,
          [name],
        ),
        returnValue: _FakeLazyBox_1<E>(
          this,
          Invocation.method(
            #lazyBox,
            [name],
          ),
        ),
      ) as _i2.LazyBox<E>);

  @override
  bool isBoxOpen(String? name) => (super.noSuchMethod(
        Invocation.method(
          #isBoxOpen,
          [name],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void unregisterBox(String? name) => super.noSuchMethod(
        Invocation.method(
          #unregisterBox,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> deleteBoxFromDisk(
    String? name, {
    String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteBoxFromDisk,
          [name],
          {#path: path},
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteFromDisk() => (super.noSuchMethod(
        Invocation.method(
          #deleteFromDisk,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  List<int> generateSecureKey() => (super.noSuchMethod(
        Invocation.method(
          #generateSecureKey,
          [],
        ),
        returnValue: <int>[],
      ) as List<int>);

  @override
  _i6.Future<bool> boxExists(
    String? name, {
    String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #boxExists,
          [name],
          {#path: path},
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  _i16.ResolvedAdapter<dynamic>? findAdapterForTypeId(int? typeId) =>
      (super.noSuchMethod(Invocation.method(
        #findAdapterForTypeId,
        [typeId],
      )) as _i16.ResolvedAdapter<dynamic>?);

  @override
  void registerAdapter<T>(
    _i2.TypeAdapter<T>? adapter, {
    bool? internal = false,
    bool? override = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerAdapter,
          [adapter],
          {
            #internal: internal,
            #override: override,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isAdapterRegistered(
    int? typeId, {
    bool? internal = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isAdapterRegistered,
          [typeId],
          {#internal: internal},
        ),
        returnValue: false,
      ) as bool);

  @override
  void resetAdapters() => super.noSuchMethod(
        Invocation.method(
          #resetAdapters,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void ignoreTypeId<T>(int? typeId) => super.noSuchMethod(
        Invocation.method(
          #ignoreTypeId,
          [typeId],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HiveList].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveList<E extends _i3.HiveObjectMixin> extends _i1.Mock
    implements _i2.HiveList<E> {
  MockHiveList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BoxBase<dynamic> get box => (super.noSuchMethod(
        Invocation.getter(#box),
        returnValue: _FakeBoxBase_2<dynamic>(
          this,
          Invocation.getter(#box),
        ),
      ) as _i2.BoxBase<dynamic>);

  @override
  Iterable<dynamic> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <dynamic>[],
      ) as Iterable<dynamic>);

  @override
  set first(E? value) => super.noSuchMethod(
        Invocation.setter(
          #first,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set last(E? value) => super.noSuchMethod(
        Invocation.setter(
          #last,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  set length(int? newLength) => super.noSuchMethod(
        Invocation.setter(
          #length,
          newLength,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Iterable<E> get reversed => (super.noSuchMethod(
        Invocation.getter(#reversed),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  Iterator<E> get iterator => (super.noSuchMethod(
        Invocation.getter(#iterator),
        returnValue: _FakeIterator_3<E>(
          this,
          Invocation.getter(#iterator),
        ),
      ) as Iterator<E>);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  E get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.getter(#first),
        ),
      ) as E);

  @override
  E get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.getter(#last),
        ),
      ) as E);

  @override
  E get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.getter(#single),
        ),
      ) as E);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.HiveList<T> castHiveList<T extends _i3.HiveObjectMixin>() =>
      (super.noSuchMethod(
        Invocation.method(
          #castHiveList,
          [],
        ),
        returnValue: _FakeHiveList_4<T>(
          this,
          Invocation.method(
            #castHiveList,
            [],
          ),
        ),
      ) as _i2.HiveList<T>);

  @override
  _i6.Future<void> deleteAllFromHive() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllFromHive,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteFirstFromHive() => (super.noSuchMethod(
        Invocation.method(
          #deleteFirstFromHive,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteLastFromHive() => (super.noSuchMethod(
        Invocation.method(
          #deleteLastFromHive,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteFromHive(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deleteFromHive,
          [index],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <dynamic, E>{},
      ) as Map<dynamic, E>);

  @override
  List<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: <R>[],
      ) as List<R>);

  @override
  E operator [](int? index) => (super.noSuchMethod(
        Invocation.method(
          #[],
          [index],
        ),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.method(
            #[],
            [index],
          ),
        ),
      ) as E);

  @override
  void operator []=(
    int? index,
    E? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #[]=,
          [
            index,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void add(E? value) => super.noSuchMethod(
        Invocation.method(
          #add,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addAll(Iterable<E>? iterable) => super.noSuchMethod(
        Invocation.method(
          #addAll,
          [iterable],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sort(
          [int Function(
            E,
            E,
          )? compare]) =>
      super.noSuchMethod(
        Invocation.method(
          #sort,
          [compare],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void shuffle([_i17.Random? random]) => super.noSuchMethod(
        Invocation.method(
          #shuffle,
          [random],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int indexOf(
    E? element, [
    int? start = 0,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #indexOf,
          [
            element,
            start,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  int indexWhere(
    bool Function(E)? test, [
    int? start = 0,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #indexWhere,
          [
            test,
            start,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  int lastIndexWhere(
    bool Function(E)? test, [
    int? start,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastIndexWhere,
          [
            test,
            start,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  int lastIndexOf(
    E? element, [
    int? start,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastIndexOf,
          [
            element,
            start,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void insert(
    int? index,
    E? element,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            index,
            element,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void insertAll(
    int? index,
    Iterable<E>? iterable,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #insertAll,
          [
            index,
            iterable,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setAll(
    int? index,
    Iterable<E>? iterable,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setAll,
          [
            index,
            iterable,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool remove(Object? value) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [value],
        ),
        returnValue: false,
      ) as bool);

  @override
  E removeAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #removeAt,
          [index],
        ),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.method(
            #removeAt,
            [index],
          ),
        ),
      ) as E);

  @override
  E removeLast() => (super.noSuchMethod(
        Invocation.method(
          #removeLast,
          [],
        ),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.method(
            #removeLast,
            [],
          ),
        ),
      ) as E);

  @override
  void removeWhere(bool Function(E)? test) => super.noSuchMethod(
        Invocation.method(
          #removeWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void retainWhere(bool Function(E)? test) => super.noSuchMethod(
        Invocation.method(
          #retainWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<E> operator +(List<E>? other) => (super.noSuchMethod(
        Invocation.method(
          #+,
          [other],
        ),
        returnValue: <E>[],
      ) as List<E>);

  @override
  List<E> sublist(
    int? start, [
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #sublist,
          [
            start,
            end,
          ],
        ),
        returnValue: <E>[],
      ) as List<E>);

  @override
  Iterable<E> getRange(
    int? start,
    int? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRange,
          [
            start,
            end,
          ],
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  void setRange(
    int? start,
    int? end,
    Iterable<E>? iterable, [
    int? skipCount = 0,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #setRange,
          [
            start,
            end,
            iterable,
            skipCount,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeRange(
    int? start,
    int? end,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removeRange,
          [
            start,
            end,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void fillRange(
    int? start,
    int? end, [
    E? fillValue,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #fillRange,
          [
            start,
            end,
            fillValue,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void replaceRange(
    int? start,
    int? end,
    Iterable<E>? replacements,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #replaceRange,
          [
            start,
            end,
            replacements,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<int, E> asMap() => (super.noSuchMethod(
        Invocation.method(
          #asMap,
          [],
        ),
        returnValue: <int, E>{},
      ) as Map<int, E>);

  @override
  Iterable<E> followedBy(Iterable<E>? other) => (super.noSuchMethod(
        Invocation.method(
          #followedBy,
          [other],
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  Iterable<T> map<T>(T Function(E)? toElement) => (super.noSuchMethod(
        Invocation.method(
          #map,
          [toElement],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  Iterable<E> where(bool Function(E)? test) => (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  Iterable<T> whereType<T>() => (super.noSuchMethod(
        Invocation.method(
          #whereType,
          [],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  Iterable<T> expand<T>(Iterable<T> Function(E)? toElements) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [toElements],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  bool contains(Object? element) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [element],
        ),
        returnValue: false,
      ) as bool);

  @override
  void forEach(void Function(E)? action) => super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValueForMissingStub: null,
      );

  @override
  E reduce(
          E Function(
            E,
            E,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.method(
            #reduce,
            [combine],
          ),
        ),
      ) as E);

  @override
  T fold<T>(
    T? initialValue,
    T Function(
      T,
      E,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _i5.dummyValue<T>(
          this,
          Invocation.method(
            #fold,
            [
              initialValue,
              combine,
            ],
          ),
        ),
      ) as T);

  @override
  bool every(bool Function(E)? test) => (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: false,
      ) as bool);

  @override
  String join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        ),
      ) as String);

  @override
  bool any(bool Function(E)? test) => (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<E> toList({bool? growable = true}) => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
          {#growable: growable},
        ),
        returnValue: <E>[],
      ) as List<E>);

  @override
  Set<E> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: <E>{},
      ) as Set<E>);

  @override
  Iterable<E> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  Iterable<E> takeWhile(bool Function(E)? test) => (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  Iterable<E> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  Iterable<E> skipWhile(bool Function(E)? test) => (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  E firstWhere(
    bool Function(E)? test, {
    E Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.method(
            #firstWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as E);

  @override
  E lastWhere(
    bool Function(E)? test, {
    E Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.method(
            #lastWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as E);

  @override
  E singleWhere(
    bool Function(E)? test, {
    E Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.method(
            #singleWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as E);

  @override
  E elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.method(
            #elementAt,
            [index],
          ),
        ),
      ) as E);
}

/// A class which mocks [HiveListImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveListImpl<E extends _i3.HiveObjectMixin> extends _i1.Mock
    implements _i18.HiveListImpl<E> {
  MockHiveListImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get boxName => (super.noSuchMethod(
        Invocation.getter(#boxName),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#boxName),
        ),
      ) as String);

  @override
  Iterable<dynamic> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <dynamic>[],
      ) as Iterable<dynamic>);

  @override
  _i2.Box<dynamic> get box => (super.noSuchMethod(
        Invocation.getter(#box),
        returnValue: _FakeBox_0<dynamic>(
          this,
          Invocation.getter(#box),
        ),
      ) as _i2.Box<dynamic>);

  @override
  List<E> get delegate => (super.noSuchMethod(
        Invocation.getter(#delegate),
        returnValue: <E>[],
      ) as List<E>);

  @override
  set length(int? newLength) => super.noSuchMethod(
        Invocation.setter(
          #length,
          newLength,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set debugHive(_i2.HiveInterface? hive) => super.noSuchMethod(
        Invocation.setter(
          #debugHive,
          hive,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set first(E? value) => super.noSuchMethod(
        Invocation.setter(
          #first,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set last(E? value) => super.noSuchMethod(
        Invocation.setter(
          #last,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  Iterable<E> get reversed => (super.noSuchMethod(
        Invocation.getter(#reversed),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  Iterator<E> get iterator => (super.noSuchMethod(
        Invocation.getter(#iterator),
        returnValue: _FakeIterator_3<E>(
          this,
          Invocation.getter(#iterator),
        ),
      ) as Iterator<E>);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  E get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.getter(#first),
        ),
      ) as E);

  @override
  E get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.getter(#last),
        ),
      ) as E);

  @override
  E get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.getter(#single),
        ),
      ) as E);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void invalidate() => super.noSuchMethod(
        Invocation.method(
          #invalidate,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void operator []=(
    int? index,
    E? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #[]=,
          [
            index,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void add(E? element) => super.noSuchMethod(
        Invocation.method(
          #add,
          [element],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addAll(Iterable<E>? iterable) => super.noSuchMethod(
        Invocation.method(
          #addAll,
          [iterable],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.HiveList<T> castHiveList<T extends _i3.HiveObjectMixin>() =>
      (super.noSuchMethod(
        Invocation.method(
          #castHiveList,
          [],
        ),
        returnValue: _FakeHiveList_4<T>(
          this,
          Invocation.method(
            #castHiveList,
            [],
          ),
        ),
      ) as _i2.HiveList<T>);

  @override
  _i6.Future<void> deleteAllFromHive() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllFromHive,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteFirstFromHive() => (super.noSuchMethod(
        Invocation.method(
          #deleteFirstFromHive,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteLastFromHive() => (super.noSuchMethod(
        Invocation.method(
          #deleteLastFromHive,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteFromHive(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deleteFromHive,
          [index],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <dynamic, E>{},
      ) as Map<dynamic, E>);

  @override
  List<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: <R>[],
      ) as List<R>);

  @override
  E operator [](int? index) => (super.noSuchMethod(
        Invocation.method(
          #[],
          [index],
        ),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.method(
            #[],
            [index],
          ),
        ),
      ) as E);

  @override
  void sort(
          [int Function(
            E,
            E,
          )? compare]) =>
      super.noSuchMethod(
        Invocation.method(
          #sort,
          [compare],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void shuffle([_i17.Random? random]) => super.noSuchMethod(
        Invocation.method(
          #shuffle,
          [random],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int indexOf(
    Object? element, [
    int? start = 0,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #indexOf,
          [
            element,
            start,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  int indexWhere(
    bool Function(E)? test, [
    int? start = 0,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #indexWhere,
          [
            test,
            start,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  int lastIndexWhere(
    bool Function(E)? test, [
    int? start,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastIndexWhere,
          [
            test,
            start,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  int lastIndexOf(
    Object? element, [
    int? start,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastIndexOf,
          [
            element,
            start,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void insert(
    int? index,
    E? element,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            index,
            element,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void insertAll(
    int? index,
    Iterable<E>? iterable,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #insertAll,
          [
            index,
            iterable,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void setAll(
    int? index,
    Iterable<E>? iterable,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setAll,
          [
            index,
            iterable,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool remove(Object? element) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [element],
        ),
        returnValue: false,
      ) as bool);

  @override
  E removeAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #removeAt,
          [index],
        ),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.method(
            #removeAt,
            [index],
          ),
        ),
      ) as E);

  @override
  E removeLast() => (super.noSuchMethod(
        Invocation.method(
          #removeLast,
          [],
        ),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.method(
            #removeLast,
            [],
          ),
        ),
      ) as E);

  @override
  void removeWhere(bool Function(E)? test) => super.noSuchMethod(
        Invocation.method(
          #removeWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void retainWhere(bool Function(E)? test) => super.noSuchMethod(
        Invocation.method(
          #retainWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<E> operator +(List<E>? other) => (super.noSuchMethod(
        Invocation.method(
          #+,
          [other],
        ),
        returnValue: <E>[],
      ) as List<E>);

  @override
  List<E> sublist(
    int? start, [
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #sublist,
          [
            start,
            end,
          ],
        ),
        returnValue: <E>[],
      ) as List<E>);

  @override
  Iterable<E> getRange(
    int? start,
    int? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRange,
          [
            start,
            end,
          ],
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  void setRange(
    int? start,
    int? end,
    Iterable<E>? iterable, [
    int? skipCount = 0,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #setRange,
          [
            start,
            end,
            iterable,
            skipCount,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeRange(
    int? start,
    int? end,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #removeRange,
          [
            start,
            end,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void fillRange(
    int? start,
    int? end, [
    E? fill,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #fillRange,
          [
            start,
            end,
            fill,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void replaceRange(
    int? start,
    int? end,
    Iterable<E>? newContents,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #replaceRange,
          [
            start,
            end,
            newContents,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<int, E> asMap() => (super.noSuchMethod(
        Invocation.method(
          #asMap,
          [],
        ),
        returnValue: <int, E>{},
      ) as Map<int, E>);

  @override
  Iterable<E> followedBy(Iterable<E>? other) => (super.noSuchMethod(
        Invocation.method(
          #followedBy,
          [other],
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  Iterable<T> map<T>(T Function(E)? f) => (super.noSuchMethod(
        Invocation.method(
          #map,
          [f],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  Iterable<E> where(bool Function(E)? test) => (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  Iterable<T> whereType<T>() => (super.noSuchMethod(
        Invocation.method(
          #whereType,
          [],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  Iterable<T> expand<T>(Iterable<T> Function(E)? f) => (super.noSuchMethod(
        Invocation.method(
          #expand,
          [f],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  bool contains(Object? element) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [element],
        ),
        returnValue: false,
      ) as bool);

  @override
  void forEach(void Function(E)? f) => super.noSuchMethod(
        Invocation.method(
          #forEach,
          [f],
        ),
        returnValueForMissingStub: null,
      );

  @override
  E reduce(
          E Function(
            E,
            E,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.method(
            #reduce,
            [combine],
          ),
        ),
      ) as E);

  @override
  T fold<T>(
    T? initialValue,
    T Function(
      T,
      E,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _i5.dummyValue<T>(
          this,
          Invocation.method(
            #fold,
            [
              initialValue,
              combine,
            ],
          ),
        ),
      ) as T);

  @override
  bool every(bool Function(E)? test) => (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: false,
      ) as bool);

  @override
  String join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        ),
      ) as String);

  @override
  bool any(bool Function(E)? test) => (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<E> toList({bool? growable = true}) => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
          {#growable: growable},
        ),
        returnValue: <E>[],
      ) as List<E>);

  @override
  Set<E> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: <E>{},
      ) as Set<E>);

  @override
  Iterable<E> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  Iterable<E> takeWhile(bool Function(E)? test) => (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  Iterable<E> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  Iterable<E> skipWhile(bool Function(E)? test) => (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: <E>[],
      ) as Iterable<E>);

  @override
  E firstWhere(
    bool Function(E)? test, {
    E Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.method(
            #firstWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as E);

  @override
  E lastWhere(
    bool Function(E)? test, {
    E Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.method(
            #lastWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as E);

  @override
  E singleWhere(
    bool Function(E)? test, {
    E Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.method(
            #singleWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as E);

  @override
  E elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _i5.dummyValue<E>(
          this,
          Invocation.method(
            #elementAt,
            [index],
          ),
        ),
      ) as E);
}

/// A class which mocks [RandomAccessFile].
///
/// See the documentation for Mockito's code generation for more information.
class MockRandomAccessFile extends _i1.Mock implements _i4.RandomAccessFile {
  MockRandomAccessFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  _i6.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void closeSync() => super.noSuchMethod(
        Invocation.method(
          #closeSync,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<int> readByte() => (super.noSuchMethod(
        Invocation.method(
          #readByte,
          [],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  int readByteSync() => (super.noSuchMethod(
        Invocation.method(
          #readByteSync,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i6.Future<_i15.Uint8List> read(int? count) => (super.noSuchMethod(
        Invocation.method(
          #read,
          [count],
        ),
        returnValue: _i6.Future<_i15.Uint8List>.value(_i15.Uint8List(0)),
      ) as _i6.Future<_i15.Uint8List>);

  @override
  _i15.Uint8List readSync(int? count) => (super.noSuchMethod(
        Invocation.method(
          #readSync,
          [count],
        ),
        returnValue: _i15.Uint8List(0),
      ) as _i15.Uint8List);

  @override
  _i6.Future<int> readInto(
    List<int>? buffer, [
    int? start = 0,
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #readInto,
          [
            buffer,
            start,
            end,
          ],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  int readIntoSync(
    List<int>? buffer, [
    int? start = 0,
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #readIntoSync,
          [
            buffer,
            start,
            end,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i6.Future<_i4.RandomAccessFile> writeByte(int? value) => (super.noSuchMethod(
        Invocation.method(
          #writeByte,
          [value],
        ),
        returnValue:
            _i6.Future<_i4.RandomAccessFile>.value(_FakeRandomAccessFile_5(
          this,
          Invocation.method(
            #writeByte,
            [value],
          ),
        )),
      ) as _i6.Future<_i4.RandomAccessFile>);

  @override
  int writeByteSync(int? value) => (super.noSuchMethod(
        Invocation.method(
          #writeByteSync,
          [value],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i6.Future<_i4.RandomAccessFile> writeFrom(
    List<int>? buffer, [
    int? start = 0,
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeFrom,
          [
            buffer,
            start,
            end,
          ],
        ),
        returnValue:
            _i6.Future<_i4.RandomAccessFile>.value(_FakeRandomAccessFile_5(
          this,
          Invocation.method(
            #writeFrom,
            [
              buffer,
              start,
              end,
            ],
          ),
        )),
      ) as _i6.Future<_i4.RandomAccessFile>);

  @override
  void writeFromSync(
    List<int>? buffer, [
    int? start = 0,
    int? end,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #writeFromSync,
          [
            buffer,
            start,
            end,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i4.RandomAccessFile> writeString(
    String? string, {
    _i19.Encoding? encoding = const _i19.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeString,
          [string],
          {#encoding: encoding},
        ),
        returnValue:
            _i6.Future<_i4.RandomAccessFile>.value(_FakeRandomAccessFile_5(
          this,
          Invocation.method(
            #writeString,
            [string],
            {#encoding: encoding},
          ),
        )),
      ) as _i6.Future<_i4.RandomAccessFile>);

  @override
  void writeStringSync(
    String? string, {
    _i19.Encoding? encoding = const _i19.Utf8Codec(),
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeStringSync,
          [string],
          {#encoding: encoding},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<int> position() => (super.noSuchMethod(
        Invocation.method(
          #position,
          [],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  int positionSync() => (super.noSuchMethod(
        Invocation.method(
          #positionSync,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i6.Future<_i4.RandomAccessFile> setPosition(int? position) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPosition,
          [position],
        ),
        returnValue:
            _i6.Future<_i4.RandomAccessFile>.value(_FakeRandomAccessFile_5(
          this,
          Invocation.method(
            #setPosition,
            [position],
          ),
        )),
      ) as _i6.Future<_i4.RandomAccessFile>);

  @override
  void setPositionSync(int? position) => super.noSuchMethod(
        Invocation.method(
          #setPositionSync,
          [position],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i4.RandomAccessFile> truncate(int? length) => (super.noSuchMethod(
        Invocation.method(
          #truncate,
          [length],
        ),
        returnValue:
            _i6.Future<_i4.RandomAccessFile>.value(_FakeRandomAccessFile_5(
          this,
          Invocation.method(
            #truncate,
            [length],
          ),
        )),
      ) as _i6.Future<_i4.RandomAccessFile>);

  @override
  void truncateSync(int? length) => super.noSuchMethod(
        Invocation.method(
          #truncateSync,
          [length],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<int> length() => (super.noSuchMethod(
        Invocation.method(
          #length,
          [],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  int lengthSync() => (super.noSuchMethod(
        Invocation.method(
          #lengthSync,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i6.Future<_i4.RandomAccessFile> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue:
            _i6.Future<_i4.RandomAccessFile>.value(_FakeRandomAccessFile_5(
          this,
          Invocation.method(
            #flush,
            [],
          ),
        )),
      ) as _i6.Future<_i4.RandomAccessFile>);

  @override
  void flushSync() => super.noSuchMethod(
        Invocation.method(
          #flushSync,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i4.RandomAccessFile> lock([
    _i4.FileLock? mode = _i4.FileLock.exclusive,
    int? start = 0,
    int? end = -1,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #lock,
          [
            mode,
            start,
            end,
          ],
        ),
        returnValue:
            _i6.Future<_i4.RandomAccessFile>.value(_FakeRandomAccessFile_5(
          this,
          Invocation.method(
            #lock,
            [
              mode,
              start,
              end,
            ],
          ),
        )),
      ) as _i6.Future<_i4.RandomAccessFile>);

  @override
  void lockSync([
    _i4.FileLock? mode = _i4.FileLock.exclusive,
    int? start = 0,
    int? end = -1,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #lockSync,
          [
            mode,
            start,
            end,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i4.RandomAccessFile> unlock([
    int? start = 0,
    int? end = -1,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #unlock,
          [
            start,
            end,
          ],
        ),
        returnValue:
            _i6.Future<_i4.RandomAccessFile>.value(_FakeRandomAccessFile_5(
          this,
          Invocation.method(
            #unlock,
            [
              start,
              end,
            ],
          ),
        )),
      ) as _i6.Future<_i4.RandomAccessFile>);

  @override
  void unlockSync([
    int? start = 0,
    int? end = -1,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #unlockSync,
          [
            start,
            end,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [BinaryReader].
///
/// See the documentation for Mockito's code generation for more information.
class MockBinaryReader extends _i1.Mock implements _i2.BinaryReader {
  MockBinaryReader() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get availableBytes => (super.noSuchMethod(
        Invocation.getter(#availableBytes),
        returnValue: 0,
      ) as int);

  @override
  int get usedBytes => (super.noSuchMethod(
        Invocation.getter(#usedBytes),
        returnValue: 0,
      ) as int);

  @override
  void skip(int? bytes) => super.noSuchMethod(
        Invocation.method(
          #skip,
          [bytes],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int readByte() => (super.noSuchMethod(
        Invocation.method(
          #readByte,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i15.Uint8List viewBytes(int? bytes) => (super.noSuchMethod(
        Invocation.method(
          #viewBytes,
          [bytes],
        ),
        returnValue: _i15.Uint8List(0),
      ) as _i15.Uint8List);

  @override
  _i15.Uint8List peekBytes(int? bytes) => (super.noSuchMethod(
        Invocation.method(
          #peekBytes,
          [bytes],
        ),
        returnValue: _i15.Uint8List(0),
      ) as _i15.Uint8List);

  @override
  int readWord() => (super.noSuchMethod(
        Invocation.method(
          #readWord,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  int readInt32() => (super.noSuchMethod(
        Invocation.method(
          #readInt32,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  int readUint32() => (super.noSuchMethod(
        Invocation.method(
          #readUint32,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  int readInt() => (super.noSuchMethod(
        Invocation.method(
          #readInt,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  double readDouble() => (super.noSuchMethod(
        Invocation.method(
          #readDouble,
          [],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  bool readBool() => (super.noSuchMethod(
        Invocation.method(
          #readBool,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  String readString([
    int? byteCount,
    _i19.Converter<List<int>, String>? decoder = const _i19.Utf8Decoder(),
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #readString,
          [
            byteCount,
            decoder,
          ],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #readString,
            [
              byteCount,
              decoder,
            ],
          ),
        ),
      ) as String);

  @override
  _i15.Uint8List readByteList([int? length]) => (super.noSuchMethod(
        Invocation.method(
          #readByteList,
          [length],
        ),
        returnValue: _i15.Uint8List(0),
      ) as _i15.Uint8List);

  @override
  List<int> readIntList([int? length]) => (super.noSuchMethod(
        Invocation.method(
          #readIntList,
          [length],
        ),
        returnValue: <int>[],
      ) as List<int>);

  @override
  List<double> readDoubleList([int? length]) => (super.noSuchMethod(
        Invocation.method(
          #readDoubleList,
          [length],
        ),
        returnValue: <double>[],
      ) as List<double>);

  @override
  List<bool> readBoolList([int? length]) => (super.noSuchMethod(
        Invocation.method(
          #readBoolList,
          [length],
        ),
        returnValue: <bool>[],
      ) as List<bool>);

  @override
  List<String> readStringList([
    int? length,
    _i19.Converter<List<int>, String>? decoder = const _i19.Utf8Decoder(),
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #readStringList,
          [
            length,
            decoder,
          ],
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  List<dynamic> readList([int? length]) => (super.noSuchMethod(
        Invocation.method(
          #readList,
          [length],
        ),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  Map<dynamic, dynamic> readMap([int? length]) => (super.noSuchMethod(
        Invocation.method(
          #readMap,
          [length],
        ),
        returnValue: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  _i2.HiveList<_i3.HiveObjectMixin> readHiveList([int? length]) =>
      (super.noSuchMethod(
        Invocation.method(
          #readHiveList,
          [length],
        ),
        returnValue: _FakeHiveList_4<_i3.HiveObjectMixin>(
          this,
          Invocation.method(
            #readHiveList,
            [length],
          ),
        ),
      ) as _i2.HiveList<_i3.HiveObjectMixin>);
}

/// A class which mocks [BinaryWriter].
///
/// See the documentation for Mockito's code generation for more information.
class MockBinaryWriter extends _i1.Mock implements _i2.BinaryWriter {
  MockBinaryWriter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void writeByte(int? byte) => super.noSuchMethod(
        Invocation.method(
          #writeByte,
          [byte],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeWord(int? value) => super.noSuchMethod(
        Invocation.method(
          #writeWord,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeInt32(int? value) => super.noSuchMethod(
        Invocation.method(
          #writeInt32,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeUint32(int? value) => super.noSuchMethod(
        Invocation.method(
          #writeUint32,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeInt(int? value) => super.noSuchMethod(
        Invocation.method(
          #writeInt,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeDouble(double? value) => super.noSuchMethod(
        Invocation.method(
          #writeDouble,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeBool(bool? value) => super.noSuchMethod(
        Invocation.method(
          #writeBool,
          [value],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeString(
    String? value, {
    bool? writeByteCount = true,
    _i19.Converter<String, List<int>>? encoder = const _i19.Utf8Encoder(),
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeString,
          [value],
          {
            #writeByteCount: writeByteCount,
            #encoder: encoder,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeByteList(
    List<int>? bytes, {
    bool? writeLength = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeByteList,
          [bytes],
          {#writeLength: writeLength},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeIntList(
    List<int>? list, {
    bool? writeLength = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeIntList,
          [list],
          {#writeLength: writeLength},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeDoubleList(
    List<double>? list, {
    bool? writeLength = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeDoubleList,
          [list],
          {#writeLength: writeLength},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeBoolList(
    List<bool>? list, {
    bool? writeLength = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeBoolList,
          [list],
          {#writeLength: writeLength},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeStringList(
    List<String>? list, {
    bool? writeLength = true,
    _i19.Converter<String, List<int>>? encoder = const _i19.Utf8Encoder(),
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeStringList,
          [list],
          {
            #writeLength: writeLength,
            #encoder: encoder,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeList(
    List<dynamic>? list, {
    bool? writeLength = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeList,
          [list],
          {#writeLength: writeLength},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeMap(
    Map<dynamic, dynamic>? map, {
    bool? writeLength = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeMap,
          [map],
          {#writeLength: writeLength},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeHiveList(
    _i2.HiveList<_i3.HiveObjectMixin>? list, {
    bool? writeLength = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeHiveList,
          [list],
          {#writeLength: writeLength},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void write<T>(
    T? value, {
    bool? writeTypeId = true,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #write,
          [value],
          {#writeTypeId: writeTypeId},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i4.File {
  MockFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.File get absolute => (super.noSuchMethod(
        Invocation.getter(#absolute),
        returnValue: _FakeFile_6(
          this,
          Invocation.getter(#absolute),
        ),
      ) as _i4.File);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_7(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);

  @override
  bool get isAbsolute => (super.noSuchMethod(
        Invocation.getter(#isAbsolute),
        returnValue: false,
      ) as bool);

  @override
  _i4.Directory get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeDirectory_8(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i4.Directory);

  @override
  _i6.Future<_i4.File> create({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValue: _i6.Future<_i4.File>.value(_FakeFile_6(
          this,
          Invocation.method(
            #create,
            [],
            {
              #recursive: recursive,
              #exclusive: exclusive,
            },
          ),
        )),
      ) as _i6.Future<_i4.File>);

  @override
  void createSync({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #createSync,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i4.File> rename(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #rename,
          [newPath],
        ),
        returnValue: _i6.Future<_i4.File>.value(_FakeFile_6(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
      ) as _i6.Future<_i4.File>);

  @override
  _i4.File renameSync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #renameSync,
          [newPath],
        ),
        returnValue: _FakeFile_6(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
      ) as _i4.File);

  @override
  _i6.Future<_i4.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#recursive: recursive},
        ),
        returnValue:
            _i6.Future<_i4.FileSystemEntity>.value(_FakeFileSystemEntity_9(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i6.Future<_i4.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #deleteSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i4.File> copy(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copy,
          [newPath],
        ),
        returnValue: _i6.Future<_i4.File>.value(_FakeFile_6(
          this,
          Invocation.method(
            #copy,
            [newPath],
          ),
        )),
      ) as _i6.Future<_i4.File>);

  @override
  _i4.File copySync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copySync,
          [newPath],
        ),
        returnValue: _FakeFile_6(
          this,
          Invocation.method(
            #copySync,
            [newPath],
          ),
        ),
      ) as _i4.File);

  @override
  _i6.Future<int> length() => (super.noSuchMethod(
        Invocation.method(
          #length,
          [],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  int lengthSync() => (super.noSuchMethod(
        Invocation.method(
          #lengthSync,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i6.Future<DateTime> lastAccessed() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessed,
          [],
        ),
        returnValue: _i6.Future<DateTime>.value(_FakeDateTime_10(
          this,
          Invocation.method(
            #lastAccessed,
            [],
          ),
        )),
      ) as _i6.Future<DateTime>);

  @override
  DateTime lastAccessedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessedSync,
          [],
        ),
        returnValue: _FakeDateTime_10(
          this,
          Invocation.method(
            #lastAccessedSync,
            [],
          ),
        ),
      ) as DateTime);

  @override
  _i6.Future<dynamic> setLastAccessed(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastAccessed,
          [time],
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  void setLastAccessedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastAccessedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<DateTime> lastModified() => (super.noSuchMethod(
        Invocation.method(
          #lastModified,
          [],
        ),
        returnValue: _i6.Future<DateTime>.value(_FakeDateTime_10(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
      ) as _i6.Future<DateTime>);

  @override
  DateTime lastModifiedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastModifiedSync,
          [],
        ),
        returnValue: _FakeDateTime_10(
          this,
          Invocation.method(
            #lastModifiedSync,
            [],
          ),
        ),
      ) as DateTime);

  @override
  _i6.Future<dynamic> setLastModified(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastModified,
          [time],
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  void setLastModifiedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastModifiedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i4.RandomAccessFile> open(
          {_i4.FileMode? mode = _i4.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
          {#mode: mode},
        ),
        returnValue:
            _i6.Future<_i4.RandomAccessFile>.value(_FakeRandomAccessFile_5(
          this,
          Invocation.method(
            #open,
            [],
            {#mode: mode},
          ),
        )),
      ) as _i6.Future<_i4.RandomAccessFile>);

  @override
  _i4.RandomAccessFile openSync({_i4.FileMode? mode = _i4.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #openSync,
          [],
          {#mode: mode},
        ),
        returnValue: _FakeRandomAccessFile_5(
          this,
          Invocation.method(
            #openSync,
            [],
            {#mode: mode},
          ),
        ),
      ) as _i4.RandomAccessFile);

  @override
  _i6.Stream<List<int>> openRead([
    int? start,
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #openRead,
          [
            start,
            end,
          ],
        ),
        returnValue: _i6.Stream<List<int>>.empty(),
      ) as _i6.Stream<List<int>>);

  @override
  _i4.IOSink openWrite({
    _i4.FileMode? mode = _i4.FileMode.write,
    _i19.Encoding? encoding = const _i19.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openWrite,
          [],
          {
            #mode: mode,
            #encoding: encoding,
          },
        ),
        returnValue: _FakeIOSink_11(
          this,
          Invocation.method(
            #openWrite,
            [],
            {
              #mode: mode,
              #encoding: encoding,
            },
          ),
        ),
      ) as _i4.IOSink);

  @override
  _i6.Future<_i15.Uint8List> readAsBytes() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytes,
          [],
        ),
        returnValue: _i6.Future<_i15.Uint8List>.value(_i15.Uint8List(0)),
      ) as _i6.Future<_i15.Uint8List>);

  @override
  _i15.Uint8List readAsBytesSync() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytesSync,
          [],
        ),
        returnValue: _i15.Uint8List(0),
      ) as _i15.Uint8List);

  @override
  _i6.Future<String> readAsString(
          {_i19.Encoding? encoding = const _i19.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsString,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i6.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #readAsString,
            [],
            {#encoding: encoding},
          ),
        )),
      ) as _i6.Future<String>);

  @override
  String readAsStringSync({_i19.Encoding? encoding = const _i19.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsStringSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #readAsStringSync,
            [],
            {#encoding: encoding},
          ),
        ),
      ) as String);

  @override
  _i6.Future<List<String>> readAsLines(
          {_i19.Encoding? encoding = const _i19.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLines,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i6.Future<List<String>>.value(<String>[]),
      ) as _i6.Future<List<String>>);

  @override
  List<String> readAsLinesSync(
          {_i19.Encoding? encoding = const _i19.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLinesSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  _i6.Future<_i4.File> writeAsBytes(
    List<int>? bytes, {
    _i4.FileMode? mode = _i4.FileMode.write,
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsBytes,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValue: _i6.Future<_i4.File>.value(_FakeFile_6(
          this,
          Invocation.method(
            #writeAsBytes,
            [bytes],
            {
              #mode: mode,
              #flush: flush,
            },
          ),
        )),
      ) as _i6.Future<_i4.File>);

  @override
  void writeAsBytesSync(
    List<int>? bytes, {
    _i4.FileMode? mode = _i4.FileMode.write,
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsBytesSync,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i4.File> writeAsString(
    String? contents, {
    _i4.FileMode? mode = _i4.FileMode.write,
    _i19.Encoding? encoding = const _i19.Utf8Codec(),
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsString,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValue: _i6.Future<_i4.File>.value(_FakeFile_6(
          this,
          Invocation.method(
            #writeAsString,
            [contents],
            {
              #mode: mode,
              #encoding: encoding,
              #flush: flush,
            },
          ),
        )),
      ) as _i6.Future<_i4.File>);

  @override
  void writeAsStringSync(
    String? contents, {
    _i4.FileMode? mode = _i4.FileMode.write,
    _i19.Encoding? encoding = const _i19.Utf8Codec(),
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsStringSync,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<bool> exists() => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  bool existsSync() => (super.noSuchMethod(
        Invocation.method(
          #existsSync,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<String> resolveSymbolicLinks() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinks,
          [],
        ),
        returnValue: _i6.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinks,
            [],
          ),
        )),
      ) as _i6.Future<String>);

  @override
  String resolveSymbolicLinksSync() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinksSync,
          [],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinksSync,
            [],
          ),
        ),
      ) as String);

  @override
  _i6.Future<_i4.FileStat> stat() => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [],
        ),
        returnValue: _i6.Future<_i4.FileStat>.value(_FakeFileStat_12(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
      ) as _i6.Future<_i4.FileStat>);

  @override
  _i4.FileStat statSync() => (super.noSuchMethod(
        Invocation.method(
          #statSync,
          [],
        ),
        returnValue: _FakeFileStat_12(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
      ) as _i4.FileStat);

  @override
  _i6.Stream<_i4.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {
            #events: events,
            #recursive: recursive,
          },
        ),
        returnValue: _i6.Stream<_i4.FileSystemEvent>.empty(),
      ) as _i6.Stream<_i4.FileSystemEvent>);
}

/// A class which mocks [FrameIoHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockFrameIoHelper extends _i1.Mock implements _i20.FrameIoHelper {
  MockFrameIoHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i4.RandomAccessFile> openFile(String? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #openFile,
          [path],
        ),
        returnValue:
            _i6.Future<_i4.RandomAccessFile>.value(_FakeRandomAccessFile_5(
          this,
          Invocation.method(
            #openFile,
            [path],
          ),
        )),
      ) as _i6.Future<_i4.RandomAccessFile>);

  @override
  _i6.Future<List<int>> readFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #readFile,
          [path],
        ),
        returnValue: _i6.Future<List<int>>.value(<int>[]),
      ) as _i6.Future<List<int>>);

  @override
  _i6.Future<int> keysFromFile(
    String? path,
    _i10.Keystore<dynamic>? keystore,
    _i2.HiveCipher? cipher,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #keysFromFile,
          [
            path,
            keystore,
            cipher,
          ],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  _i6.Future<int> framesFromFile(
    String? path,
    _i10.Keystore<dynamic>? keystore,
    _i2.TypeRegistry? registry,
    _i2.HiveCipher? cipher,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #framesFromFile,
          [
            path,
            keystore,
            registry,
            cipher,
          ],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  int framesFromBytes(
    _i15.Uint8List? bytes,
    _i10.Keystore<dynamic>? keystore,
    _i2.TypeRegistry? registry,
    _i2.HiveCipher? cipher,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #framesFromBytes,
          [
            bytes,
            keystore,
            registry,
            cipher,
          ],
        ),
        returnValue: 0,
      ) as int);
}
